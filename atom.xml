<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ralph's Blog]]></title>
  <subtitle><![CDATA[通过看书、网络上的文章等学习的知识用自己的语言描述出来]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ralph.com/"/>
  <updated>2015-10-11T14:05:03.041Z</updated>
  <id>http://ralph.com/</id>
  
  <author>
    <name><![CDATA[Ralph'D]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[demo]]></title>
    <link href="http://ralph.com/2015/10/11/demo/"/>
    <id>http://ralph.com/2015/10/11/demo/</id>
    <published>2015-10-11T14:05:03.000Z</published>
    <updated>2015-10-11T14:05:03.041Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习Java集合系列一List]]></title>
    <link href="http://ralph.com/2015/10/11/List/"/>
    <id>http://ralph.com/2015/10/11/List/</id>
    <published>2015-10-11T13:14:08.000Z</published>
    <updated>2015-10-12T13:08:21.461Z</updated>
    <content type="html"><![CDATA[<h3 id="一、简介">一、简介</h3><pre><code><span class="built_in">List</span>常用实现类有ArrayList、LinkedList、Vector等，<span class="built_in">List</span>是有序列表，
所以可以控制元素插入位置，且允许存在相同元素。
</code></pre><a id="more"></a>
<hr>
<p><img src="http://7xndq7.com1.z0.glb.clouddn.com/List2.png" alt="此处输入图片的描述"></p>
<hr>
<h4 id="1、List接口提供的方法：">1、List接口提供的方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span>     <span class="title">add</span><span class="params">(E e)</span><span class="comment">//添加元素e</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>         <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span><span class="comment">//在指定下标(index)位置添加元素element</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">//添加集合c中的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span><span class="comment">//在列表的指定下标(index)  位置添加集合c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>         <span class="title">clear</span><span class="params">()</span><span class="comment">//清空列表中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">contains</span><span class="params">(Object o)</span><span class="comment">//列表中是否包含元素(o)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span><span class="comment">//列表中是否包含集合c中的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">equals</span><span class="params">(Object o)</span></span><br><span class="line"></span><br><span class="line">E           <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//取得指定下标(index)位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>         <span class="title">hashCode</span><span class="params">()</span><span class="comment">//返回列表的hashcode值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>         <span class="title">indexOf</span><span class="params">(Object o)</span><span class="comment">//返回指定对象o在列表中第一次出现的下标位置，如果没有该对象返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">isEmpty</span><span class="params">()</span><span class="comment">//列表是否为空，如果是空返回true</span></span><br><span class="line"></span><br><span class="line">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span><span class="comment">//以列表中元素本来顺序返回列表元素的迭代器</span></span><br><span class="line">。</span><br><span class="line"><span class="keyword">int</span>         <span class="title">lastIndexOf</span><span class="params">(Object o)</span><span class="comment">//返回指定对象o在列表中最后一次出现的下标位置，  如果没有该对象返回-1</span></span><br><span class="line"></span><br><span class="line">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span><span class="comment">//以列表中元素本来顺序返回列表元素的迭代器。</span></span><br><span class="line"></span><br><span class="line">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//以列表中元素本来顺序返回列表元素的迭代器。</span></span><br><span class="line">开始位置下标是<span class="params">(index)</span></span><br><span class="line"></span><br><span class="line">E             <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//删除指定位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">remove</span><span class="params">(Object o)</span><span class="comment">//删除列表中第一次出现的指定元素o</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span><span class="comment">//从列表中删除指定集合所含的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>     <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span><span class="comment">//列表只保留指定集合所含的元素</span></span><br><span class="line"></span><br><span class="line">E             <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span><span class="comment">//在指定位置中插入元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>         <span class="title">size</span><span class="params">()</span><span class="comment">//返回列表长度</span></span><br><span class="line"></span><br><span class="line">List&lt;E&gt;     <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><span class="comment">//返回列表位置fromindex到toindex位置的元素  的列表</span></span><br><span class="line"></span><br><span class="line">Object[]     <span class="title">toArray</span><span class="params">()</span><span class="comment">//列表转换成数组</span></span><br><span class="line"></span><br><span class="line">&lt;T&gt; T[]     <span class="title">toArray</span><span class="params">(T[] a)</span><span class="comment">//列表转换成指定类型的数组</span></span></span><br></pre></td></tr></table></figure>
<h3 id="二、ArrayList_vs-_LinkedList_vs-_Vector的数据结构">二、ArrayList vs. LinkedList vs. Vector的数据结构</h3><p>1、ArrayList、Vector实现了长度大小可变的数组，数据结构是线性表中的顺序存储结构。<br>2、LinkedList 使用了循环双向链表。数据结构是线性表中链式存储结构。</p>
<hr>
<h3 id="二、ArrayList_vs-_LinkedList_vs-_Vector之间使用中的区别">二、ArrayList vs. LinkedList vs. Vector之间使用中的区别</h3><pre><code>它们都实现了<span class="built_in">List</span>接口，使用上非常类似，但是它们数据结构的不同导致不同操作上性能差别较大。
Vector和ArrayList基本类似，不同的是Vector是线程安全的,Vector的方法是同步的，有性能上的开销，
如果程序是线程安全的建议使用ArrayList，LinkedList对元素的插入和删除性能要好于ArrayList,
ArrayList对元素的查找要比LinkedList快很多。
</code></pre><h4 id="1、查找">1、查找</h4><pre><code>ArraList可以通过.<span class="function"><span class="title">get</span><span class="params">(int index)</span></span>方法直接访问元素，而LinkedList 的.<span class="function"><span class="title">get</span><span class="params">(int index)</span></span>
则需要通过遍历来查找元素,所以在对元素的查找上性能要好于LinkedList，ArrayList的速度是<span class="function"><span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span>，
而LinkedList的性能是<span class="function"><span class="title">O</span><span class="params">(n)</span></span>.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    arrayList.add(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> starta = System.nanoTime();</span><br><span class="line">arrayList.get(<span class="number">3876</span>);</span><br><span class="line"><span class="keyword">long</span> enda = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"ArrayList ："</span> + (enda - starta));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    linkedList.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startl = System.nanoTime();</span><br><span class="line">linkedList.get(<span class="number">3876</span>);</span><br><span class="line"><span class="keyword">long</span> endl = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"LinkedList："</span> + (endl - startl));</span><br><span class="line"></span><br><span class="line">ArrayList ：<span class="number">7270</span></span><br><span class="line">LinkedList：<span class="number">110762</span></span><br></pre></td></tr></table></figure>
<h4 id="2、删除和插入">2、删除和插入</h4><pre><code>LinkedList每个元素维护两个指向相邻元素的指针，删除和插入数据时只需要改变指针指向的位置，
ArrayList是通过元素下标来维护列表中的元素，因为ArrayList是基于数组实现的，
数组是一块连续内存空间，如果删除的不是列表的尾部元素，则ArrayList删除时需要把后面的元素向  前移动，
插入时需要把后面的元素向后移动。
</code></pre><hr>
<h5 id="a、列表尾部插入元素性能比较：">a、列表尾部插入元素性能比较：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">3</span>; t++) &#123;</span><br><span class="line">System.out.println(<span class="string">"插入时间比较："</span>);</span><br><span class="line"><span class="keyword">long</span> starta = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    arrayList.add(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> enda = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"ArrayList ："</span> + (enda - starta));</span><br><span class="line"><span class="keyword">long</span> startl = System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    linkedList.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endl = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"LinkedList："</span> + (endl - startl));</span><br><span class="line"></span><br><span class="line">插入时间比较：</span><br><span class="line">ArrayList ：<span class="number">4840615</span></span><br><span class="line">LinkedList：<span class="number">4347531</span></span><br></pre></td></tr></table></figure>
<hr>
<h5 id="b、列表非尾部位置插入元素性能比较：">b、列表非尾部位置插入元素性能比较：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> starta = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        arrayList.add(<span class="number">10</span>,j);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        arrayList.add(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> enda = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"ArrayList ："</span> + (enda - starta));</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startl = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        linkedList.add(<span class="number">10</span>, i);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; linkedList.add(i);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endl = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"LinkedList："</span> + (endl - startl));</span><br><span class="line"></span><br><span class="line">ArrayList ：<span class="number">54617401</span></span><br><span class="line">LinkedList：<span class="number">9695771</span></span><br></pre></td></tr></table></figure>
<pre><code>以上可以看出列表尾部插入元素性能差距不大，但是非尾部插入元素性能差距较大。删操作类似，
插入和删除操作的元素越靠前，性能差距越大。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、简介">一、简介</h3><pre><code><span class="built_in">List</span>常用实现类有ArrayList、LinkedList、Vector等，<span class="built_in">List</span>是有序列表，
所以可以控制元素插入位置，且允许存在相同元素。
</code></pre>]]>
    
    </summary>
    
      <category term="ArrayList" scheme="http://ralph.com/tags/ArrayList/"/>
    
      <category term="Java" scheme="http://ralph.com/tags/Java/"/>
    
      <category term="LinkedList" scheme="http://ralph.com/tags/LinkedList/"/>
    
      <category term="List" scheme="http://ralph.com/tags/List/"/>
    
      <category term="Vector" scheme="http://ralph.com/tags/Vector/"/>
    
  </entry>
  
</feed>
